import streamlit as st
import requests
import pandas as pd

API_KEY = st.secrets['google']["API_KEY"]  # Replace with your API key
SPREADSHEET_ID = st.secrets['google']["SPREADSHEET_ID"]  # Replace with your spreadsheet ID

def determine_concluded(row):
    return ", ".join(
        f"‡πÄ‡∏ã‡∏ï‡∏ó‡∏µ‡πà {i}" for i in range(1, 21) if row.get(f"set_{i}") == 1
    )

# --- Load Data from Google Sheets ---
@st.cache_data(ttl=600)
def load_data():
    sheet_name = "template"
    """Fetch data from a specific sheet."""
    url = (
        f"https://sheets.googleapis.com/v4/spreadsheets/{SPREADSHEET_ID}/values/{sheet_name}"
        f"?key={API_KEY}"
    )
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"API request failed: {response.text}")

    data = response.json().get("values", [])
    if not data:
        return pd.DataFrame()  # Return empty DataFrame if no data

    # Normalize data to match the header length
    max_cols = len(data[0])
    normalized_data = [row + [''] * (max_cols - len(row)) for row in data]
    return pd.DataFrame(normalized_data[1:], columns=normalized_data[0])

# df = load_data()
df = pd.read_csv("mock_student_data.csv")
df["‡πÄ‡∏ã‡∏ï"] = df.apply(determine_concluded, axis=1)

# --- Page Config ---
st.set_page_config(page_title="‡∏™‡∏∏‡πÄ‡∏ó‡∏û‡∏™‡∏ï‡∏π‡∏î‡∏¥‡πÇ‡∏≠ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", layout="wide", page_icon="üì∏")

# --- Cover Image ---
st.image("cover.jpg", use_container_width=True)

# --- Titles ---
st.title("‡∏™‡∏∏‡πÄ‡∏ó‡∏û‡∏™‡∏ï‡∏π‡∏î‡∏¥‡πÇ‡∏≠ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà")
st.subheader("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ ‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏°‡πà‡πÇ‡∏à‡πâ")

# --- Session State Setup ---
if "student_input" not in st.session_state:
    st.session_state.student_input = ""
if "search_clicked" not in st.session_state:
    st.session_state.search_clicked = False

def do_search():
    st.session_state.search_clicked = True

# --- Input Area ---
st.text_input(
    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    key="student_input",
    placeholder="‡πÄ‡∏ä‡πà‡∏ô 67000001, 67000002 ‡∏´‡∏£‡∏∑‡∏≠ 67000001, 67000002",
    # height=100,
)

# --- Search Button ---
st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", on_click=do_search)

# --- Search Logic ---
if st.session_state.search_clicked:
    user_input = st.session_state.student_input.strip()
    if user_input:
        ids = [x.strip() for x in user_input.replace(",", " ").split()]
        filtered = df[df["‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"].astype(str).isin(ids)].copy()

        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏
        def get_tracking(row):
            if row["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß":
                return row["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏"]
            elif row["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï":
                return "-"
            return ""

        filtered["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏"] = filtered.apply(get_tracking, axis=1)

        if filtered.empty:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤")
        else:
            missing = set(ids) - set(filtered["‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"].astype(str))
            if missing:
                st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ: {', '.join(missing)}")

            def highlight_status(row):
                if row["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß":
                    return ["background-color: #d4edda"] * len(row)  # Green
                elif row["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï":
                    return ["background-color: #fff3cd"] * len(row)  # Yellow
                return [""] * len(row)

            st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            styled_df = (
                filtered[
                    [
                        "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
                        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                        "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏",
                        "‡∏ä‡∏∑‡πà‡∏≠",
                        "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
                        "‡∏Ñ‡∏ì‡∏∞",
                        "‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤",
                        "‡πÄ‡∏ã‡∏ï",
                        "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
                        "‡∏ï‡∏≥‡∏ö‡∏•",
                        "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
                        "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
                        "‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå",
                        "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                    ]
                ]
                .style
                .apply(highlight_status, axis=1)
                .hide(axis="index")
            )
            st.dataframe(styled_df, use_container_width=True, hide_index=True)
    else:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")